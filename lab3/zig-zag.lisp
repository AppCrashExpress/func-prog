(defun matrix-1l-2l (n)
  "Creates a zig-zag matrix of size 'n'"
  (let ((matrix (make-array (list n n) :element-type 'integer))
        (col 0)
        (row 0)
        (value 1))
      ; Fills triangle above antidiagonal
      (loop while (and (/= col (1- n)) (/= row (1- n)))
        do (setf (aref matrix col row) value)
           (incf value)
           (if (evenp (+ col row))
               (if (= row 0)
                   (incf col)
                   (setf row (1- row)
                         col (1+ col)))
               (if (= col 0)
                   (incf row)
                   (setf col (1- col)
                         row (1+ row)))))
      ; Fills the rest of the matrix
      (loop while (/= value (1+ (* n n)))
        do (setf (aref matrix col row) value)
           (incf value)
           (if (evenp (+ col row))
               (if (= col (1- n))
                   (incf row)
                   (setf row (1- row)
                         col (1+ col)))
               (if (= row (1- n))
                   (incf col)
                   (setf col (1- col)
                         row (1+ row)))))
      ; Returns the resulting matrix
      matrix))

